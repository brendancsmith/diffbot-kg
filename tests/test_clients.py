# Generated by CodiumAI

import pytest

from diffbot_kg.clients import DiffbotEnhanceClient, DiffbotSearchClient
from diffbot_kg.session import DiffbotResponse


class TestDiffbotSearchClient:

    # mocker fixture
    @pytest.fixture
    def mock(self, mocker):
        return mocker

    # Returns a DiffbotResponse object when given a search query.
    @pytest.mark.asyncio
    async def test_mocked_search_query(self, mock):
        # Initialize the DiffbotSearchClient object
        client = DiffbotSearchClient(token="valid_token")

        # Define the search query parameters
        params = {"query": "your_search_query", "limit": 10}

        # Mock the _post_or_put method
        mock.patch.object(
            DiffbotSearchClient,
            "_post_or_put",
            return_value=DiffbotResponse(200, {}, {}),  # type: ignore
        )

        # Call the search method
        response = await client.search(params)

        # Assert that the response is an instance of DiffbotResponse
        assert isinstance(response, DiffbotResponse)
        assert response.status == 200


class TestDiffbotEnhanceClient:

    # mocker fixture
    @pytest.fixture
    def mock(self, mocker):
        return mocker

    # Returns a DiffbotResponse object when given an enhance query.
    @pytest.mark.asyncio
    async def test_mocked_enhance_query(self, mock):
        # Initialize the DiffbotSearchClient object
        client = DiffbotEnhanceClient(token="valid_token")

        # Define the search query parameters
        params = {"query": "your_search_query", "limit": 10}

        # Mock the _post_or_put method
        mock.patch.object(
            DiffbotEnhanceClient,
            "_get",
            return_value=DiffbotResponse(200, {}, {}),  # type: ignore
        )

        # Call the search method
        response = await client.enhance(params)

        # Assert that the response is an instance of DiffbotResponse
        assert isinstance(response, DiffbotResponse)
        assert response.status == 200

    # Returns a DiffbotResponse object when given a bulk enhance query.
    @pytest.mark.asyncio
    async def test_mocked_create_bulkjob(self, mock):
        # Initialize the DiffbotSearchClient object
        client = DiffbotEnhanceClient(token="valid_token")

        # Define the search query parameters
        params = {"query": "your_bulk_enhance_query", "limit": 10}

        # Mock the _post_or_put method
        mock.patch.object(
            DiffbotEnhanceClient,
            "_post",
            return_value=DiffbotResponse(200, {}, {}),  # type: ignore
        )

        # Call the bulk enhance method
        response = await client.create_bulkjob(params)

        # Assert that the response is an instance of DiffbotResponse
        assert isinstance(response, DiffbotResponse)
        assert response.status == 200
